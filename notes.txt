
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


    moznost dotazat sa na openai databazu miesto vlastnej?

    formatovanie appky style nefunguje na mobile

   email knowledgevertex@martinsvoren.com
   
   
   webova stranka produktu? 
   
   https na web aj appku 
   
   
   citanie odpovedi by bola parada

X vytvorit config na heslo, api key a zoznam indexov

X cloning whole app and storages for diferent clients

X creating show up app with data - windwos manual, skoda superb manual a aeste nejake 3-4

oslovit 10 zakaznikov - 2 mesiace testovania zdarma, nasledne mesacne fee + nejaky spravcovsky poplatok , nutnost zautomatizovat nahravanie dokumentov
zalozit firmu



X response log
X server and error log
X zobrazenie historickych odpovedi

X moznost chatovat , teda zobrazovat otazku. odpoved v jednom okne

X login page


https://medium.com/@martin-thissen/llama-alpaca-chatgpt-on-your-local-computer-tutorial-17adda704c23


To clone instance with load balancer and https : 

===== in EC2 
==clone Original working isntance
==run commmands from requirements.txt
==test that app works on public ip on port 5000
==associate new elastic ip 
==create target group and asociate isntance 
==create load balancer wiith https kv app security groups, select created target group and set listeners 443 to app , select certificate df97 atd the end
==edit created load balancer and ad new listener 80 redirect to 443

===== in ROUTE 53
create recort ass subdomain - customers name, turn on Alias an select clasic load balancer, region Stockholm  and chose new load balancer 

==== in OPEN AI API KEY
== create new key 
===== in EC2 
==open new isntance, log into console, open main.py and paste api key










To check the availability of a public IP on port 5000 and restart the `app2.service` if it's not responsive, you can use a script. Here's an example script in Bash:

```bash
#!/bin/bash

# Define the IP address and port to check
IP_ADDRESS="your_public_ip"
PORT=5000

# Function to check if the IP and port are responsive
check_availability() {
    nc -zv -w 5 $IP_ADDRESS $PORT > /dev/null 2>&1
}

# Check if the IP and port are responsive
if check_availability; then
    echo "IP is responsive"
else
    echo "IP is not responsive. Restarting app2.service..."
    
    # Restart the app2.service
    systemctl restart app2.service
    
    # Check if the restart was successful
    if check_availability; then
        echo "Restart successful. IP is now responsive."
    else
        echo "Restart failed. IP is still not responsive."
    fi
fi
```

Make sure to replace `your_public_ip` with the actual public IP address you want to check. Save the script in a file, e.g., `check_ip.sh`, and make it executable by running `chmod +x check_ip.sh`.

To run this script periodically, you can add it to a cron job. Use the `crontab -e` command to open the cron table and add an entry like the following to run the script every minute:

```
* * * * * /path/to/check_ip.sh >> /path/to/check_ip.log 2>&1
```

Replace `/path/to/check_ip.sh` with the actual path to your script file, and `/path/to/check_ip.log` with the desired path for the log file.

This cron job will execute the script every minute, and any output or error messages will be logged to the specified log file.

Note that this script assumes you have the necessary permissions to restart the `app2.service` using `systemctl`. Adjust the script accordingly if you need to use a different command or if additional permissions are required.